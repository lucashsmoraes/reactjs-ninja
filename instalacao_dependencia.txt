1° configuração básica do webpack (branch react-webpack)
    * criar o package.json; 
        - no diretório vazio "echo {} >> package.json"
    * instalar o webpack como dependência de desenvolvimento;
        - npm install --save-dev webpack@1
    * criar arquivo webpack.config.js
        - configurar para ler um arquivo e gerar o bundle;
    * criar o arquivo src/index.js
        - mkdir src
    * gerar o bundle com webpack (precisa instalar o webpack global)
        - npm install -g webpack@1
    * criar o arquivo index.html e adicionar o bundle

2° Usando o server do webpack
    * instalar dependência para o server
        - npm install --save-dev webpack-dev-server@1
    * adicionar o publicPath no webpack.config;
        - passar o caminho correto no index.html
    * subir o server de desenvolviment
        - npm install -g webpack-dev-server@1
3° Modularizando uma aplicação
    * criar um novo arquivo em src/app.js;

4° Criando uma aplicação em React
    * instalar dependências React e ReactDOM;
        - npm install --save react@15.4 react-dom@15.4
    * criar um componente em src/app.js
        - obs: para resolver o problema na aula MRW#05 
        - (npm install -g babel webpack webpack webpack-dev-server)

5° Modularizando a aplicação
    * instalar dependências
        - Babel - bablejs.io 
            (npm install --save-dev babel-core@6 babel-loader@6 babel-preset-es2015@6 babel-preset-stage-0@6)
        - Babel presets.
    * criar arquivo .babelrc
    * adicionar as entradas 
    * atualizar o webpack.config.js
    * Atualizar src/app.js, usando export do ES2015
    * atualizar src/index.js, usando import
    * utilizar import com shorthand notation para o método
        - render do ReactDOM

6° Configurando JSX no babel e sourcemaps no webpack
    * adicionar o preset do react;
        - npm install --save-dev babel-preset-react@6
    * atualizar o .babelrc, adcionando esse preset;
    * atualizar os arquivos src/app.js e src/index.js, para usar JSX;
    * adicionar entrada de sourcemaps no webpack.config
        - module export (devtool: 'source-map')

7° Utilizando react hot loader
    * instalar react hot loader
        - npm install --save-dev react-hot-loader@3.0.0-beta.2
    * atualizar o webpack.config
    * atualizar o .babelrc
    * criar um arquivo server.js para rodar com o Node.js
    * criar a entrada start no package.json

8° Utilizando react hot loader
    * Atualizar arquivo src/index.js

9° Configurando o Linter
    * adicionar standard e standard-loader
        - npm install --save-dev standard standard-loader@4
    * editar o webpack.config, adcionando o standard
    * npm install --save-dev webpack-validator

10° Props (branch github-app)
    * usando props

11° Atributos do html com props

12° getDefaultProps

13° Passando outros tipos de dados via props

14° Renderizando componentes
    * React.createClass();
        - commits anteriores ao 13
    * Funções puras;
        - Ex: arrow function ES6
            const Title = (props) => (
                <h1> Olá {`${props.name} ${props.lastName}`}</h1>
            )
    * Classes (ES2015)
15 ° Renderizando componentes com classes do ES62015
    * ex class:     
        class App extends Component{
            render() {
                return (
                    <div className='container' data-id='1'> 
                        <Title name='Lucas'/>
                    </div>
                )
            }
        }
16° Conhecendo a prop "Key"
    * ex Key
        <div className='container' data-id='1'>
            {['blue', 'red', 'green'].map((square) => (
          <Square key={square} color={square}/>
            ))}       
        </div>

17° Eventos

18° A prop "children"
    * const Button = ({ children }) => (
        <button>{children}</button>
     )

